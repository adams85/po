grammar TestPluralExpression
{
    options
    {
        Axiom = "expression";
        Separator = "SEPARATOR";
    }
    terminals
    {
        WHITE_SPACE	-> U+0020 | U+0009 ;
        SEPARATOR -> WHITE_SPACE+;

        INTEGER -> [0-9]+ ;
        VARIABLE -> 'n' ; 
    }
    rules
    {
        expression -> logical_or_expression^ 
                    | logical_or_expression '?'! expression ':'! expression
                    ;

        logical_or_expression -> logical_and_expression^
                               | logical_or_expression '||'! logical_and_expression
                               ;

        logical_and_expression -> equality_expression^
                                | logical_and_expression '&&'! equality_expression
                                ;

        equality_expression -> relational_expression^
                             | equality_expression '==' relational_expression
                             | equality_expression '!=' relational_expression
                             ;

        relational_expression -> additive_expression^
                               | relational_expression '<' additive_expression
                               | relational_expression '>' additive_expression
                               | relational_expression '<=' additive_expression
                               | relational_expression '>=' additive_expression
                               ;

        additive_expression -> multiplicative_expression^
                             | additive_expression '+' multiplicative_expression
                             | additive_expression '-' multiplicative_expression
                             ;

        multiplicative_expression -> unary_expression^
                                   | multiplicative_expression '*' unary_expression
                                   | multiplicative_expression '/' unary_expression
                                   | multiplicative_expression '%' unary_expression
                                   ;

        unary_expression -> factor^
                          | '!' unary_expression
                          | '+' unary_expression
                          | '-' unary_expression
                          ;

        factor -> INTEGER^
                | VARIABLE^
                | '('! expression^ ')'!
                ;
    }
}