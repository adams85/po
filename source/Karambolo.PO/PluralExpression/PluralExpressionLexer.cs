/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.5.1.0
 */
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace Karambolo.PO.PluralExpression
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
	internal class PluralExpressionLexer : ContextFreeLexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton commonAutomaton = Automaton.Find(typeof(PluralExpressionLexer), "PluralExpressionLexer.bin");
		/// <summary>
		/// Contains the constant IDs for the terminals for this lexer
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class ID
		{
			/// <summary>
			/// The unique identifier for terminal WHITE_SPACE
			/// </summary>
			public const int TerminalWhiteSpace = 0x0003;
			/// <summary>
			/// The unique identifier for terminal SEPARATOR
			/// </summary>
			public const int TerminalSeparator = 0x0004;
			/// <summary>
			/// The unique identifier for terminal INTEGER
			/// </summary>
			public const int TerminalInteger = 0x0005;
			/// <summary>
			/// The unique identifier for terminal VARIABLE
			/// </summary>
			public const int TerminalVariable = 0x0006;
		}
		/// <summary>
		/// Contains the constant IDs for the contexts for this lexer
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class Context
		{
			/// <summary>
			/// The unique identifier for the default context
			/// </summary>
			public const int Default = 0;
		}
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x0001, "ε"),
			new Symbol(0x0002, "$"),
			new Symbol(0x0003, "WHITE_SPACE"),
			new Symbol(0x0004, "SEPARATOR"),
			new Symbol(0x0005, "INTEGER"),
			new Symbol(0x0006, "VARIABLE"),
			new Symbol(0x000F, "?"),
			new Symbol(0x0010, ":"),
			new Symbol(0x0011, "||"),
			new Symbol(0x0012, "&&"),
			new Symbol(0x0013, "=="),
			new Symbol(0x0014, "!="),
			new Symbol(0x0015, "<"),
			new Symbol(0x0016, ">"),
			new Symbol(0x0017, "<="),
			new Symbol(0x0018, ">="),
			new Symbol(0x0019, "+"),
			new Symbol(0x001A, "-"),
			new Symbol(0x001B, "*"),
			new Symbol(0x001C, "/"),
			new Symbol(0x001D, "%"),
			new Symbol(0x001E, "("),
			new Symbol(0x001F, ")") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public PluralExpressionLexer(string input) : base(commonAutomaton, terminals, 0x0004, input) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public PluralExpressionLexer(TextReader input) : base(commonAutomaton, terminals, 0x0004, input) {}
	}
}
